---
title: "Scripting"
---

## Concepts of scripting in iLand {#sec-scripting}

The scripting approach used in iLand relies on the [scripting capabilities of the Qt-framework](https://doc.qt.io/qt-6.5/qtjavascript.html). Qt includes a fully ECMA compatible JavaScript engine, which means that the JavaScript capabilities of iLand are very similar to those of a modern browser. While execution speed of scripts have been heavily optimized over the years (e.g., they are compiled just-in-time by the system), there is still a performance gap between the world of JavaScript and the native C++ world of iLand.

## Introduction to JavaScript

JavaScript is a versatile programming language known for its adaptability and widespread usage in various applications beyond just web development. It's like a Swiss Army knife for coding, enabling you to create interactive and dynamic content, not just for websites, but also for other tasks like data analysis, automation, and simulations.

Its user-friendly nature and extensive online resources make it relatively easy to learn, especially if you're already familiar with languages like R. Additionally, JavaScript has a large community of developers who constantly contribute to its development, ensuring that there are plenty of libraries and frameworks available to simplify complex tasks.

Since JavaScript is mostly used as the "language of the web" (e.g., for dynamic web sites) a lot of documentation and discussions on sites such as StackOverflow are web-centered. But do not despair: there is plenty information on "pure" JavaScript available. As a rule of thumb, look for content that does not mention typical web "frameworks" such as "React JS", "Angular", "jQuery". However, many sites about web development do have good information on "pure" Javascript!

::: callout-note
The JavaScript implementation used in iLand supports the full ECMA-262 specification - this means that all of the standard objects and functions are available (see <https://doc.qt.io/qt-6/qtqml-javascript-functionlist.html> for a full list). Also JavaScript libraries can be used - as long as they do not require browser-specific functionality.

These sites (among many others) provide good documentation about pure JavaScript:

<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference>, or <https://www.w3schools.com/jsref/>
:::

## JavaScript in iLand

When you run JavaScript code in iLand (we'll get to how to get code into the model in a second), then the code can access objects and functions that are provided by the model. These "links" to the model via objects and functions comprises the Application Programming Interface (API) of iLand. The documentation of the iLand API is at [iland-model.org/apidoc](https://iland-model.org/apidoc). Code can be executed manually, or run automatically when the model runs (e.g., to execute forest management).

There is a single JavaScript "engine" in the model, which means that all JavaScript objects and functions share the same environment. As a consequence, elements can be overwritten! For instance, you could manually change a function that has been loaded previously; it also means you can only have one instance of an event handler (see @sec-event-handler). While a basic JavaScript engine is already available after startup of the model executable, iLand API objects are only available when a project is (successfully) loaded.

### Ways to load JavaScript code

There are multiple options to load and execute JavaScript code in iLand. Note, that all JavaScript code shares the same execution environment!

#### Specify a code file in *system.javascript.filename*

iLand loads this JavaScript code file early on, and looks in the directory specified with *system.path.scripts* in the project file.

#### Specify a code file with a specific iLand sub module

Several sub modules of iLand allow specification of a dedicated JavaScript file. Examples are base management, ABE (agent based management engine), BITE (biotic disturbance engine), and some specialized outputs (e.g., the Stand Development Stage).

#### Write and run code manually in the iLand user interface

Code that is **executed** in the iLand JS code editor (see @fig-js-editor) affects the JavaScript environment, i.e. you can create objects and functions, and run code. You can also run code that affects the vegetation, for example forest management scripts. Note that changes (e.g., harvested trees) may not be visible in the user interface immediately. You might need to refresh the visualization (`F5` and `F6` keys, see also the `View` menu), or even run an additional year of the simulation.

The code editor keeps the content of the editor area across iLand simulations, but does not execute any code automatically, so you'll have to do it manually (usually by selecting the lines and pressing `Ctrl+Enter` key combination).

### When and how is JavaScript code executed?

Generally, JavaScript code is executed as soon as it is loaded. This means that public declarations and code (that is, code that is not part of a function or an object) are executed immediately.

::: {#lst-js-globalvar}
``` javascript
// global variables are initialized immediately
var my_var = "global";

// public code is also run immediately
console.log(my_var); // this prints "global" to the log file / screen

// this can be problematic, because the model may not be fully available
// note also that the "management" interface object is only available when
// iLand management module is enabled.
var n_trees = management.loadAll();
console.log("global: total number of trees: " + n_trees);

// functions are created, but *not* executed!
function check_trees() {
  
  let n_trees = management.loadAll();
  console.log("function: total number of trees: " + n_trees);
  
}
```
:::

In @lst-js-globalvar we have global variables and code, as well as functions.

However, in most cases your JavaScript code will be called (i.e., run or invoked) by the model. iLand provides several ways for your scripts to be engaged by iLand. The most important are described below.

#### JavaScript in forest management and BITE

The implementation of forest management in iLand relies heavily on JavaScript. There are two flavors of management available: "base" management and ABE, the agent based management approach. The "base" [management](https://iland-model.org/management) module is simpler (and older) than the [agent based management](https://iland-model.org/ABE) approach, but still versatile and allows a wide range of options for altering the forest in the model (extracting of trees, planting of trees, ...).

In base management, a single javascript file is defined in the [Project file](https://iland-model.org/project+file "Description of the project XML file") and loaded during startup of the model. Every year the function `manage()` is called by iLand. The example shows a very simple and not particularly useful management routine:

``` javascript
function manage(year) {
  console.log('management called in year ' + year); 
  
}
```

In case of ABE and BITE (a general module to simulate a wide range of biotic disturbances in forests) the integration with JavaScript is more powerful (but also more complex). Both modules rely on a declarative style (@sec-declarative-style), and provide multiple ways to integrate your JavaScript code with objects of the iLand world provided via an API. See also the [chapter on forest management](Using_ABE.html) for more details!

#### user interface

As mentioned previously, the user interface includes a simple "JavaScript code editor" that allows calling of JavaScript functions (@fig-js-editor). In addition, the user can load JavaScript source from the iLand user interface. 

#### time events

iLand provides a [mechanism](https://iland-model.org/time+events "descibes the TimeEvents mechanism") that updates the values of model settings automatically over time. Typical uses are to trigger pre-defined events such as storms, or change CO2 concentration over time. The same mechanism can also be used to run JavaScript functions at specific times.

#### event handler {#sec-event-handler}

An *event handler* in the context of iLand is a JavaScript function that is called when a specific event happens during the simulation. If no such function is found, then nothing happens. In other words: to "enable" such a handler, you just need to define a function with the correct name. The following event handlers are available in every iLand simulation:

|                 |                                                                   |
|--------------------------|---------------------------------------------|
| **Handler**     | **Description**                                                   |
| onAfterCreate   | Called immediately before the first simulation year is executed.  |
| onBeforeDestroy | Called after the simulation has ended and the model is shut down. |
| onYearBegin     | Called at the beginning of each simulation year.                  |
| onYearEnd       | Called after each simulated year.                                 |

``` javascript
// examples for event handler code
// this can be part of any javascript code

function onAfterCreate() {
  console.log("after create event handler called. Counting trees...");
  
  // call another function (this one was defined in the above listing  -
  // now is a good time to actually execute it, 
  // as all trees are already present)
  check_trees();

}

function onYearEnd() {
  // the function is called every year, but it is simple
  // to limit actions to specific years:
  if (Globals.year == 100) {
    // do someting special in simulation year 100
    // e.g., create some very specific outputs
    
    // or just enable/disable existing outputs
    
    // or save a screenshot to a PNG file
    
  }
}
```

In addition, this mechanism is used in the [fire module](https://iland-model.org/fire+module "technical description of the fire module in iLand") to allow some evaluation work after a fire happened.

### Working with JavaScript in iLand {#sec-working-with-JavaScript}

The user interface of iLand has rudimentary support for editing code and interacting with the model using JavaScript. While very useful on its own, iLand is not - and does not want to be - a full-fledged Integrated Development Environment (IDE) such as R Studio, or Visual Studio. If you are working on longer scripts, it can be a good approach to edit code using a good editor (Notepad++) or an IDE, and use iLand to inspect data and develop code snippets interactively.

![Code editor and JavaScript workspace window](images/clipboard-1466008929.png){#fig-js-editor}

Using the code editor is straightforward. You can enter / copy&paste code, and run code by selecting the code and pressing `Ctrl+Enter`. To run code in a single line, it suffices to have the cursor in the line and press `Ctrl+Enter`. iLand "remembers" the content of the code editor between restarts, which makes it easy to keep some useful code snippets around. The executed code as well as any log messages from the code are shown in the "log output window", even when iLand log output is written to a log file. If you are interested in the return value of executed code, you need to explicitly log (e.g., using `console.log()` or `Globals.alert()`), or store to a variable for later use. Note that it is possible to "overwrite" already existing functions / objects and run them interactively (see example below) - this is a great way to quickly improve or debug code without having to restart the model multiple times.

The "workspace" window allows inspection of variables and objects that are currently available in the JavaScript engine as pairs of "name" and "value". The "name" is typically used to access the respective value. The following types of data are shown:

-   The "value" of simple types (such as numbers or strings) is shown directly

-   JavaScript objects (also nested objects) are shown as a tree of properties/functions, which can be expanded. Arrays of values or arrays of objects are also expandable. The "value" of objects is the generic label `object Objects`.

-   Objects provided by iLand API are shown as well. In this case the value is the internal object type name (sometimes slightly cryptic) and the (hexadecimal) memory address of said object (the memory address can be useful to decide if multiple Javascript object refer to the *same* underlying object in iLand memory space). An example is `ABE::SchedulerObj(0x25d432a0)`.

-   Javascript functions are shown as `function <functionname>() {[ native code ]}`.

Note that iLand hides some standard objects to avoid cluttering (Math, JSON, Atomics, Reflect, console).

The following example shows how you access (and modify) elements shown in the workspace window:

``` javascript
// simple values
console.log(filename); 

// javascript objects

// iLand API
Globals.year = 23; // yields an error, as Globals.year is read-only
```

#### Output

Text output from JavaScript code is typically written to the log window (or the log file during simulations). A useful pattern that allows many details in the log during development, but avoids millions of log lines during large simulations, is the idea of "debug levels". A simple implementation in JavaScript with just two levels (on or off) could look like this:

``` javascript
// global switch that turns on or off detailed logging
var debug_logging = true; 
// log function
function log(msg){
  if (debug_logging)
    console.log(msg);
}

// in user code:
var n = trees.count();
log(`there are ${n} trees in the list`);
```

You could have `debug_logging` set to `true` during development, or during debugging (just run `debug_logging=true;` in the editor to turn logging on), and switched off again later.

#### interactive development example

For example, consider the case when you want to create custom raster output files at certain years and have the code in a file that is automatically loaded (`system.javascript.filename`).

::: {#lst-js-write-extra-output}
``` javascript
// content of "extra_output.js"
function onYearEnd() {
  if (Globals.year == 100) {
    writeExtraOutput();
  }
}

function writeExtraOutput() {
  // construct a unique name for the output file by using a user-defined 
  // scenario and the current year
  var filename = "output/extra_grid_" + 
    Globals.setting("user.code") + "_" +  Globals.year + ".asc";
  var vol_grid = Globals.resourceUnitGrid("basalArea");
  // basal area m2 of Norway spruce
  var species_grid = Globals.speciesShareGrid("piab"); 
  // calculate relative basal area for norway spruce
  vol_grid.combine('bP/bT', {bP: species_grid, bT: vol_grid} );
  vol_grid.save(filename); // and save to file
  
}
```
:::

The code in @lst-js-write-extra-output shows:

-   how you can create unique filenames by using the current year of a simulation and values from the project file (the section `user` is dedicated for that use, as it is not used by the model itself).

-   how you can get gridded information from iLand, and can use that for simple "raster algebra" operations (see [iLand API](https://iland-model.org/apidoc/))

To test / improve your code, you could either run iLand multiple times (and wait until 100 years are simulated each time), or you do it interactively. You could:

-   copy the code snippet (the `writeExtraOutput()` function in @lst-js-write-extra-output) to the JavaScript editor window

-   change code, and run the full function (select and `Ctrl+Enter`)

-   in addition, you could run individual statements of the function (basically line by line). For example, if you run `var vol_grid = Globals.resourceUnitGrid("volume");`, you'll have also access to the `Grid` object, as `vol_grid` would then be a global variable. In that case, you can use the Javascript workspace window and inspect the properties of the grid (such as resolution, size, or name). Note, that in case of grids you can also just plot them (`grid.paint(min_value, max_value)`)!

-   copy back working code to your JavaScript source file and run final tests with a full iLand simulation.

### Declarative style and JavaScript objects {#sec-declarative-style}

In JavaScript, a declarative style is an approach to programming where you focus on describing "what" you want to achieve rather than explicitly specifying "how" to achieve it. Declarative programming is often contrasted with imperative programming, where you explicitly outline step-by-step instructions for the computer to follow. Major key points of declarative programming are:

**Descriptive code style**\
Declarative code is more descriptive and expresses the desired outcome in a clear and concise manner. Instead of detailing the steps to perform a task, you declare what you want to accomplish. For example, you describe a minimum DBH threshold for a thinning, but not the rules how to enforce that.\

**Level of abstraction**\
Declarative programming involves the use of abstractions that hide the low-level implementation details. This allows you to work at a higher level of abstraction, focusing on the overall structure and logic.

iLand uses such a declarative style mainly for ABE and BITE as it is a very flexible mechanism that allows mixing functionality provided by the model with user logic written in JavaScript (that may use again the iLand API to interact with the model). For instance, you define a management activity in ABE and describe certain properties of that activity:

-   When should the activity be executed?

-   Are there any conditions (e.g., minimum diameter) that need to be met?

-   What should happen, when the activity is run?

Particularly for the "what should happen" part it can be helpful to be able to control programmatically in a very detailed and descriptive way what exactly should happen. iLand heavily uses "declarative objects" for this task.

Declarative objects can contain different types of data, including simple values, arrays, and functions. JavaScript object literal syntax is a concise way to create such declarative objects. Objects in JavaScript are collections of key-value pairs, where each key is a string (or a Symbol) and each value can be of any data type, including other objects. The object literal syntax provides a clean and readable way to define objects directly in your code.

Here's the basic structure of an object using object literal syntax:

``` javascript
const myObject = {
  key1: value1,
  key2: value2,
  // ...
};
```

-   **`myObject`**: The name of the variable holding the object.
-   **`key1`, `key2`**: The keys of the object, usually strings, but they can also be Symbols (introduced in ES6).
-   **`value1`, `value2`**: The corresponding values associated with the keys. Values can be of any data type, including numbers, strings, arrays, functions, and even other objects.

**Example**

``` javascript
const person = {
  name: "John Doe",
  age: 30,
  city: "Example City",
  hobbies: ["reading", "coding", "traveling"],
  greet: function() {
    console.log(`Hello, my name is ${this.name}!`);
  },
};

console.log(person.name);          // Output: John Doe
console.log(person.hobbies[1]);    // Output: coding
person.greet();                    // Output: Hello, my name is John Doe!
```

### Related JavaScript topics

#### Concatenating strings

Building complex strings is a very common requirement in iLand scripts. Typical use cases are to build filenames, e.g., to include some scenario label and simulation year to a raster output, or to build "[expressions](https://iland-model.org/expression)". Expressions are used in many places in iLand, e.g., to create a filter expression to select trees with specific properties in a [tree list](https://iland-model.org/apidoc/classes/TreeList.html).

Javascript supports a variety of ways to concatenate strings (the web is full of useful guides); However, below are some simple examples:

``` javascript
 // classic use of the + operator
 var filename = Globals.path("output/species_grid_" + Globals.year + ".asc");
 
 // if substrings are in an array, you can use the "join()" method
 var filename = ["output/species_grid", Globals.year, ".asc"].join('_')
 
 // string literals are a newish but very nice way to do it
 // (https://developer.mozilla.org/en-US/docs/Web/
 //  JavaScript/Reference/Template_literals)
 // filter trees in a circle around a point p with a radius 10:
 
 const p={x: 10, y=44}; const maxr=10;
 const filter_str = `(x-${p.x})^2 + (y-${p.y})^2 <= ${maxr}`; 
 // produces: -> "(x-10)^2 + (y-44)^2 <= 10"
 stand.trees.filter(filter_str);
 
 
```

#### Exceptions and error handling

Handling errors is an important aspect of developing any type of code - this is also relevant for JavaScript in iLand. There are various approaches how to handle error conditions. The most important are:

**Creating log messages**\
This is clearly useful, particularly during development. Informative log messages point you to specific error conditions and thus help to improve the code. The downside, however, is that errors can easily get buried in the log file, and it can get hard to (a) notice that something went wrong, and (b) to find out what went wrong. A good strategy in such a case is to scan the log file particularly for strings used in your log messages (strings including "error" are particularly easy to find).

**Raise exceptions to stop a simulation**\
Exceptions are errors that (usually) halt the execution of the simulation and show a popup-window informing about the error. (Note that behavior is different in `ilandc`). (TODO: check JS exceptions in ilandc!!!). Exceptions are raised either by iLand (e.g., when you access a setting in the XML project file that does not exist), or you can also create your own exceptions/ error messages in JavaScript user code. Moreover, you can *catch* exceptions in JavaScript code and handle the error yourself - in that case the exception does not leave JavaScript world and thus the simulation does not stop.

Below are two examples of using exceptions. More on exceptions in Javascript can be found in this [this general introduction](https://www.w3schools.com/js/js_errors.asp).

##### Example 1 - raise an exception from user code

This example is taken from an ABE management script:

``` javascript
# Example 1: 
# Raise an explicit error

function getNextPoint(stand_id) {
    // search for a point in a pre-loaded table 
    const index = pfile.findIndex(element => element.stand_id === stand_id && 
    element.id >= 0);
    // It should not happen that no point is left, so raise an error:
    if (index == -1)
        throw new Error('no valid point left!');
    ....
}
```

When the error occurs, a message pops up:

![Example error message for an exception thrown from JavaScript](images/iland_js_exception_msg.PNG)

##### Example 2 - Handling errors raised by iLand

The following examples uses JavaScript to catch exceptions from iLand.

``` javascript
// helper function to check if a given setting 
// exists in the XML project file
function settingExists(key) {
    try {
    let x = Globals.setting(key);
    
    } catch (error) {
        console.log(error);
        return false;
    }
    
    // the setting exists
    return true
}

// use of the function

if (settingExists("user.my_user_setting.a")) {
   // ....
   // execute this code only when a specific 
   // setting can be found in the project file
}
```

#### Reading and writing files {#sec-reading-writing-javascript}

A re-occuring requirement is the need to get auxiliary data into the model to be used with JavaScript code. In many cases you need to read input data from text files, either as tables (think CSV-delimited data files) or just pure text. Similarly, writing text files is often needed, e.g., to create and store extra output data or extra log files. iLand provides a couple of mechanisms that can be use for file input/output and some are described in the following.

**Reading and writing simple text files**

The `Globals` object provides the function `loadTextFile()` and `saveTextFile()` and other useful functions when working with files (e.g., `path()`, or `fileExists()`. See the [Globals object API documentation](https://iland-model.org/apidoc/classes/Globals.html).

**Reading (and writing) tabular data**

To read tables from text files, you can use the [CSVFile object](https://iland-model.org/apidoc/classes/CSVFile.html). In a nutshell, a `CSVFile` object reads and parses a text table (auto-detecting the delimiters) and provides function to access the values of particular rows and column. Note that `CSVFile` lets you also *change* the values of cells and save the changed table to file!

You can work either directly with the API from `CSVFile`, or convert the content of the data file into a more convenient form, e.g., as a JavaScript object. The following code shows a way to do it:

``` javascript

// load a text-file based data table and convert to an JS object
function loadFromFile(filename) {
    var res = [];
    // load CSV File
    var csv = new CSVFile(Globals.path(filename));
    // convert each row to an object with column names as property names
    for (var r=0;r<csv.rowCount;++r) {
        var obj = {};
        for (var c=0;c<csv.colCount;++c) {
            obj[csv.columnName(c)] = csv.jsValue(r,c);
        }
        res.push(obj);
    }
    return res;
}
```

The resulting data structure is an array with an entry for each line of the data table; each entry is a JavaScript object with column-names as key-names of the objects. Consider the following table `data.csv`:

| Year | standId | species | proportion | ... |
|------|---------|---------|------------|-----|
| 5    | 1       | abal    | 0.5        | ... |
| 5    | 3       | piab    | 0.2        | ... |
| 9    | 3       | piab    | 0.4        | ... |

After reading (e.g., `data = loadFromFile('data.csv')`), you can access the content of the table, e.g., `data[0].standId` would be 1. Note that such a structure is very convenient for manipulation (e.g., filtering) with JavaScript. For example:

``` javascript
// filter all elements of the current year (here: 5)

const current = data.filter(item => item.year === 5);

// loop over the elements
for (const elem of current) {
  processStand(elem);
}

// the 'obj' has the columns of the CSV file as properties:
function processStand(obj) {
  console.log(`Process stand ${obj.standId} and species ${obj.species}!`);
}
```

**Creating a log-file**

Sometimes you want to create a "log-file" on your own to save some information related to your processing. For example, the stand level processing of the previous example could log information on how it all went. A simple logger-class for such a use case could look like this:

``` javascript
// a simple logger class
// to log information for each year and stand
function Logger(logfile) {
    this.path=logfile;
    this.text = "year;stand;text"; // the lines
    this.save = function() {  Globals.saveTextFile(Globals.path(this.path), 
    this.text);  }
    this.log = function(id, txt) { var line=Globals.year + ";" + 
    id + ";" + txt; 
                                this.text = this.text + "\n" + line; }
}
```

The `Logger` uses some internal formatting logic and saves the log file using the `saveTextFile()` function discussed above. Here is how to use it:

``` javascript
// create an instance of the logger, e.g. as global variable
var plog = new Logger(Globals.path('temp/my_processing.log'));

function processStand(obj) {
 // ...
 plog.log(obj.standId, `Processing started. 
 Try to remove ${obj.proportion}.` );
 // ...
}

// Note that you need to call the save() function to actually store on disk.
// this could be done when all processing is done for a year
....
plog.save();
```
